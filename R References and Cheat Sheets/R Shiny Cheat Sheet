R Shiny Cheat Sheet

To Run Shiny Apps

	Locally

	> library(shiny)
	> runApp()

	On shinyapps.io server
	 1. get rsconnect package -> install.packages("rsconnect")
	 2. get authorization info from shinyapps.io server
	 3. Deploy as follows

	 	> library(rconnect)
	 	# recommended to set working directory to folder containing your ui.R and server.R
	 	> rsconnect::deployApp(path/to/your/app)

	Showcase Mode using local to show code on side:
		> runApp("App-1", display.mode = "showcase")

Control Widgets

	function				widget
	actionButton			Action Button
	checkboxGroupInput		A group of check boxes
	checkboxInput			A single check box
	dateInput				A calendar to aid date selection
	dateRangeInput			A pair of calendars for selecting a date range
	fileInput				A file upload control wizard
	helpText				Help text that can be added to an input form
	numericInput			A field to enter numbers
	radioButtons			A set of radio buttons
	selectInput				A box with choices to select from
	sliderInput				A slider bar
	submitButton			A submit button
	textInput				A field to enter text

HTML R Shiny
	
	names(tags)
	##   [1] "a"           "abbr"        "address"     "area"        "article"
	##   [6] "aside"       "audio"       "b"           "base"        "bdi"
	##  [11] "bdo"         "blockquote"  "body"        "br"          "button"
	##  [16] "canvas"      "caption"     "cite"        "code"        "col"
	##  [21] "colgroup"    "command"     "data"        "datalist"    "dd"
	##  [26] "del"         "details"     "dfn"         "div"         "dl"
	##  [31] "dt"          "em"          "embed"       "eventsource" "fieldset"
	##  [36] "figcaption"  "figure"      "footer"      "form"        "h1"
	##  [41] "h2"          "h3"          "h4"          "h5"          "h6"
	##  [46] "head"        "header"      "hgroup"      "hr"          "html"
	##  [51] "i"           "iframe"      "img"         "input"       "ins"
	##  [56] "kbd"         "keygen"      "label"       "legend"      "li"
	##  [61] "link"        "mark"        "map"         "menu"        "meta"
	##  [66] "meter"       "nav"         "noscript"    "object"      "ol"
	##  [71] "optgroup"    "option"      "output"      "p"           "param"
	##  [76] "pre"         "progress"    "q"           "ruby"        "rp"
	##  [81] "rt"          "s"           "samp"        "script"      "section"
	##  [86] "select"      "small"       "source"      "span"        "strong"
	##  [91] "style"       "sub"         "summary"     "sup"         "table"
	##  [96] "tbody"       "td"          "textarea"    "tfoot"       "th"
	## [101] "thead"       "time"        "title"       "tr"          "track"
	## [106] "u"           "ul"          "var"         "video"       "wbr"

	To put things in unordered list

		p("* asdlkfjsalfjsdkljf")

Reactive Outputs
	Output function	creates
	
	htmlOutput			raw HTML
	imageOutput			image
	plotOutput			plot
	tableOutput			table
	textOutput			text
	uiOutput			raw HTML
	verbatimTextOutput	text
	
Formatting Text Outputs
	
	Separating things with new line:

Including CSS in Shiny Apps
	
	1. Include your raw CSS directly inline in the head of your app
	2. Include CSS within specific HTML tags
	3. With a two page app (ui.R and server.R) you can add a folder called www and the app will automatically read any CSS files youâ€™ve included there.
	4. The shinyjs package (discussed below) also has a useful function called inlineCSS that you can use to add CSS
	5. Use the includeCSS function to read an external CSS file

observe server function
	 - should not be used to return data or values
	 - designed to listen to reactive elements and respond by causing side effects, such as updating text boxes or pull-downs
	 - two flavors of observe
	 	1. observe: code inside will get triggered when any of the reactive values inside change
	 	2. observeEvent: code will only be triggered by specified reactive values
	 		 - forces you to think through and specify the reactions you want to see

reactive server function
	 - gets triggered by reactive element like observer
	 - creates a function and returns results generally saved as an object
	 - use elsewhere in server as any other R function
	 - not supposed to generate side effects, should be self-contained

Understanding and controlling when reactive functions get triggered
	 - If there is no reactive value in the observer the code will run once and never again
	 - If there is a reactive value in the observer that is uninvolved in any calculations the code will run on app load and then on each change

Since reactive values trigger reactive functions you should keep reactive values separated whenever possible

Font Awesome icons and other icons
	icon(name, class = NULL, lib = "font-awesome")

	# add an icon to a submit button
	submitButton("Update View", icon = icon("refresh"))

Methods of storing persistent data remotely with shiny app
	 - difference between local and remote storage
	 	 - local: saving a file on same machine running shiny application
	 	 	 - functions such as write.csv(), write.table(), and saveRDS() implement local storage because will save file on machine running app
	 	 - remote: saving data on another server <- much more reliable than storing data in local machine because less susceptible to corruption and other bad stuff

Dynamic UI
	 - 

Errors

	When using includeCSS() and cannot find .css file, returns "Error: cannot open connection"

	"operation not allowed without an active reactive context" error thrown when reactive values are not wrapped in observer, reactive, or render functions

